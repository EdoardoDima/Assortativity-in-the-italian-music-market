counter_nomi = counter_nomi + 1
print(counter_nomi)
print(Sys.time())
}
Sys.setenv(SPOTIFY_CLIENT_ID = 'd800a5bdbb48410694ea1c81f6f8c43d')
#'04be970e055a4f57919398dff8223d7c')#'3a1af47d371a44e99298835f767c9cfc')
Sys.setenv(SPOTIFY_CLIENT_SECRET = '5726284a13b248f98ab068c1e3930124')
#'116121fd5e8247f98134ae310bfaf182')#'ad065f3013c04f8492f870f82c61f794')
access_token <- get_spotify_access_token()
counter_nomi = 972
for (i in nomi_loop$X1[972:1003]){
if(counter_nomi %% 10 == 0) {print('Powernapping')}
if(counter_nomi %% 10 == 0) {Sys.sleep(60)}
counter_arr = 1
rel_arr = c()
albums_len = c(1)
for (off in offsets_album){
if (albums_len[length(albums_len)] > 0){
albums = get_artist_albums(
i,
include_groups = "appears_on",
market = 'IT',
limit = 20,
offset = off,
authorization = access_token,
include_meta_info = FALSE
)
#print(off)
albums = albums$id[which(albums$album_type != 'compilation')]
albums_len[length(albums_len) +1] = length(albums)
#print(albums_len)
if (length(albums) > 0){
rel = get_albums(albums, market = NULL, authorization = access_token, include_meta_info = FALSE)
for (related in rel[[2]]){
nome_related = related[3]
rel_arr[counter_arr] = nome_related[1,]
counter_arr = counter_arr + 1
}
}
}
}
if (length(rel_arr) < 400){rel_arr[length(rel_arr):400] = NA}
#row_collab = c(i, rel_arr)
#print(rel_arr)
collab[counter_nomi,] = rel_arr
counter_nomi = counter_nomi + 1
print(counter_nomi)
print(Sys.time())
}
for (i in nomi_loop$X1[972:1003]){
if(counter_nomi %% 10 == 0) {print('Powernapping')}
if(counter_nomi %% 10 == 0) {Sys.sleep(60)}
counter_arr = 1
rel_arr = c()
albums_len = c(1)
for (off in offsets_album){
if (albums_len[length(albums_len)] > 0){
albums = get_artist_albums(
i,
include_groups = "appears_on",
market = 'IT',
limit = 20,
offset = off,
authorization = access_token,
include_meta_info = FALSE
)
#print(off)
albums = albums$id[which(albums$album_type != 'compilation')]
albums_len[length(albums_len) +1] = length(albums)
#print(albums_len)
if (length(albums) > 0){
rel = get_albums(albums, market = NULL, authorization = access_token, include_meta_info = FALSE)
for (related in rel[[2]]){
nome_related = related[3]
rel_arr[counter_arr] = nome_related[1,]
counter_arr = counter_arr + 1
}
}
}
}
if (length(rel_arr) < 400){rel_arr[length(rel_arr):400] = NA}
#row_collab = c(i, rel_arr)
#print(rel_arr)
collab[counter_nomi,] = rel_arr
counter_nomi = counter_nomi + 1
print(counter_nomi)
print(Sys.time())
}
counter_nomi = 972
counter_nomi = 972
for (i in nomi_loop$X1[972:1003]){
if(counter_nomi %% 10 == 0) {print('Powernapping')}
if(counter_nomi %% 10 == 0) {Sys.sleep(60)}
counter_arr = 1
rel_arr = c()
albums_len = c(1)
for (off in offsets_album){
if (albums_len[length(albums_len)] > 0){
albums = get_artist_albums(
i,
include_groups = "appears_on",
market = 'IT',
limit = 20,
offset = off,
authorization = access_token,
include_meta_info = FALSE
)
#print(off)
albums = albums$id[which(albums$album_type != 'compilation')]
albums_len[length(albums_len) +1] = length(albums)
#print(albums_len)
if (length(albums) > 0){
rel = get_albums(albums, market = NULL, authorization = access_token, include_meta_info = FALSE)
for (related in rel[[2]]){
nome_related = related[3]
rel_arr[counter_arr] = nome_related[1,]
counter_arr = counter_arr + 1
}
}
}
}
if (length(rel_arr) < 400){rel_arr[length(rel_arr):400] = NA}
#row_collab = c(i, rel_arr)
#print(rel_arr)
collab[counter_nomi,] = rel_arr
counter_nomi = counter_nomi + 1
print(counter_nomi)
print(Sys.time())
}
collab[1003,]
write.csv(what2, "C:/Users/CreCre/Documents/collab_1003.csv", row.names=FALSE)
write.csv(collab, "C:/Users/CreCre/Documents/collab_1003.csv", row.names=FALSE)
collab = read.csv("C:/Users/CreCre/Documents/collab_1003.csv")
nodes = as.data.frame(nomi_loop$X2)
1003*400
nodes = as.data.frame(nomi_loop$X2)
edges = data.frame(matrix(nrow = 401200, ncol = 2))
counter_artista = 1
counterinho = 1
collab_with_names = cbind(nomi_loop$X2, collab)
counter_artista = 1
counterinho = 1
for (row in 1:nrow(collab_with_names)) {
print(counter_artista)
counter_artista = counter_artista + 1
nome = collab_correct[row, 1]
listozza = as.vector(collab_correct[row,2:400])
for(i in listozza){
edge = c(nome, i)
#print(edge)
edges[counterinho, ] = edge
counterinho = counterinho + 1
#print(counterinho)
}
}
counter_artista = 1
counterinho = 1
for (row in 1:nrow(collab_with_names)) {
print(counter_artista)
counter_artista = counter_artista + 1
nome = collab_with_names[row, 1]
listozza = as.vector(collab_with_names[row,2:400])
for(i in listozza){
edge = c(nome, i)
#print(edge)
edges[counterinho, ] = edge
counterinho = counterinho + 1
#print(counterinho)
}
}
edges_final = edges[complete.cases(edges), ]
write.csv(nodes, "C:/Users/CreCre/Documents/nodes_2.csv", row.names=FALSE)
write.csv(edges_final, "C:/Users/CreCre/Documents/edges_2.csv", row.names=FALSE)
print('Geolier' %in% nomi_loop$X2)
library("dplyr")
to_remove_df = c()
counter_remove = 1
for (row in 1:nrow(edges_final)) {
#listozza = as.vector(collab[row,])
sec = edges_final[row,2]
if (sec %in% nomi_loop$X2 == FALSE){
print(row)
to_remove_df[counter_remove] = row
counter_remove = counter_remove + 1
}
}
edges_final_clean = edges_final[-c(to_remove_df),]
library(igraph)
g <- graph_from_data_frame(edges_final_clean, directed=FALSE, vertices=nodes)
plot(g, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold, vertex.label = NA)
V(g)$degree <- degree(g)
# Example: Count nodes with degree 3
sum(V(g)$degree==0)
# Example: Count nodes with degree 3
V(g)$degree==0
# Example: Count nodes with degree 3
which(V(g)$degree==0)
# Example: Count nodes with degree 3
zero_degree = which(V(g)$degree==0)
g2 = g - zero_degree
plot(g2, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold, vertex.label = NA)
sum(V(g2)$degree==0)
write.csv(edges_final_clean, "C:/Users/CreCre/Documents/edges_2_clean.csv", row.names=FALSE)
library(igraph)
nodes = read.csv("C:/Users/CreCre/Documents/nodes_2.csv")
edges = read.csv("C:/Users/CreCre/Documents/edges_2_clean.csv")
g <- graph_from_data_frame(edges_final_clean, directed=FALSE, vertices=nodes)
zero_degree = which(V(g)$degree==0)
g <- graph_from_data_frame(edges, directed=FALSE, vertices=nodes)
zero_degree = which(V(g)$degree==0)
g = g - zero_degree
plot(g2, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold, vertex.label = NA)
plot(g, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold, vertex.label = NA)
g <- graph_from_data_frame(edges, directed=FALSE, vertices=nodes)
zero_degree = which(V(g)$degree==0)
g = g - zero_degree
g <- graph_from_data_frame(edges, directed=FALSE, vertices=nodes)
zero_degree = which(V(g)$degree==0)
g2 = g - zero_degree
length(which(V(g)$degree==0))
g <- graph_from_data_frame(edges, directed=FALSE, vertices=nodes)
V(g)$degree <- degree(g)
# Example: Count nodes with degree 3
zero_degree = which(V(g)$degree==0)
g2 = g - zero_degree
g = g - zero_degree
plot(g, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold, vertex.label = NA)
plot(g,
layout = layout.fruchterman.reingold,
vertex.label.cex = .7,
vertex.size = degree(network),
vertex.label.color = "black",
vertex.frame.color = NA,
edge.arrow.size = .2,
edge.color = "darkgray"
)
plot(g,
layout = layout.fruchterman.reingold,
vertex.label.cex = .7,
vertex.size = degree(g),
vertex.label.color = "black",
vertex.frame.color = NA,
edge.arrow.size = .2,
edge.color = "darkgray"
)
plot(g,
layout = layout.fruchterman.reingold,
vertex.label.cex = .7,
vertex.size = degree(g),
vertex.label.color = "black",
vertex.frame.color = NA,
edge.arrow.size = .2,
edge.color = "darkgray",
vertex.label = NA
)
plot(g, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, #vertex.color = ,
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
library(igraph)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, #vertex.color = ,
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = rainbow(1),
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = rainbow(10),
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = rainbow(1),
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = rainbow(2),
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = rainbow(300),
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(simplify(g_v2), vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
plot(g_v2, vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
'plot(simplify(g_v2), vertex.size= 0.01,edge.arrow.size=0.001,vertex.label.cex = 0.75,
vertex.label.color = "black"  ,
vertex.frame.color = adjustcolor("white", alpha.f = 0),
vertex.color = adjustcolor("white", alpha.f = 0),
edge.color=adjustcolor(1, alpha.f = 0.15),
display.isolates=FALSE,
vertex.label=ifelse(page_rank(g_v2)$vector > 0.1 , "important nodes", NA))'
V(g_v2)[vertex_attr(g_v2,'Genre') == 'Rap/Hip-Hop']$color = 'deeppink4'
V(g_v2)[vertex_attr(g_v2,'Genre') == 'Indie']$color = 'turquoise4'
V(g_v2)[vertex_attr(g_v2,'Genre') == 'Pop']$color = 'azure4'
V(g_v2)[vertex_attr(g_v2,'Genre') == 'Emo/Punk']$color = 'olivedrab'
layout <- layout_with_lgl(
g_v2,
maxiter = 150,
maxdelta = vcount(g_v2),
area = 5*vcount(g_v2)^2,
coolexp = 1.5,
#repulserad = area * vcount(g_v2),
#cellsize = sqrt(sqrt(area)),
root = NULL
)
plot(g_v2, vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
cls <- clusters(g_v2)
cls$csize
g2 <- delete_vertices(g_v2, V(g_v2)[cls$membership %in% which(cls$csize <= 10)])
plot(g2)
plot(g2,vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
View(cls)
g_rap = delete_vertices(g_v2, V(g_v2)[vertex_attr(g_v2, "Genre" == 'Rap/Hip-Hop')])
g_rap = delete_vertices(g_v2, V(g_v2)[vertex_attr(g_v2, "Genre") == 'Rap/Hip-Hop'])
g_rap = delete_vertices(g_v2, V(g_v2)[!vertex_attr(g_v2, "Genre") == 'Rap/Hip-Hop'])
plot(g_rap,vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout.fruchterman.reingold,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
degree_rap = sort(igraph::degree(g_rap, v = V(g_rap), mode = "all"), decreasing = TRUE)
length(which(degree_rap== 0)) # 201 disconnected
mean(degree_rap)
hist(degree_rap[degree_rap > 0], breaks = 100, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
#install.packages("netseg")
library(igraph)
setwd('C:/Users/CreCre/Downloads/Assortativity-in-the-italian-music-market')
nodes = read.csv("nodes_2.csv")
edges = read.csv("edges_2_clean.csv")
artist_df_2 = read.csv("artist_df_2.csv")
artist_hiphop = read.csv("artist_hiphop.csv")
artist_df = rbind(artist_df_2, artist_hiphop)
missclass = c(955, 959, 964, 977, 992, 1011, 2795, 2796, 2798, 2802, 2822, 2826,
2841, 2865, 2883, 2954, 2999, 3118, 3272, 3297, 3409)
artist_df[missclass, 6] = 'rap'
#art2 = artist_df[!duplicated(artist_df$X1), ]
italians = (which(artist_df$X4 == 1))
dati_artisti = artist_df[italians,]
dati_artisti[,8] = 'Genre_agg'
for (row in 1:nrow(dati_artisti)){
if (dati_artisti[row,]$X6 == 'rap'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'hip-hop'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'indie'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'indie-pop'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'pop'){
dati_artisti[row,8] = 'Pop'
}
if (dati_artisti[row,]$X6 == 'emo'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk-rock'){
dati_artisti[row,8] = 'Emo/Punk'
}
}
#duplicati = dati_artisti[which(duplicated(dati_artisti$X1)),]
dati_artisti_final = dati_artisti[!duplicated(dati_artisti$X1), -c(4,6)]
colnames(dati_artisti_final) = c('id', 'name', 'followers', 'popularity', 'genre')
#edges_unique = edges[!duplicated(edges), ]
edges_unique2 <- edges[!duplicated(apply(edges[,1:2], 1, function(row) paste(sort(row), collapse=""))),]
artisti_genre = as.vector(dati_artisti_final[,6])
artisti_popol = as.vector(dati_artisti_final[,4])
artisti_foll = as.vector(dati_artisti_final[,3])
#####
# Building network
g <- graph_from_data_frame(edges_unique2, directed=FALSE, vertices=nodes
)
g = set_vertex_attr(g, 'Genre', index = V(g), artisti_genre)
g = set_vertex_attr(g, 'Popularity', index = V(g), artisti_popol)
g = set_vertex_attr(g, 'Followers', index = V(g), artisti_foll)
V(g)$degree <- degree(g)
zero_degree = which(degree(g)==0)
g = g - zero_degree
plot(g, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold,
vertex.label = ifelse(degree(g) >= 34, V(g)$name, NA))
degree_g = sort(igraph::degree(g, v = V(g), mode = "all"), decreasing = TRUE)
length(which(degree_g== 0))
mean(degree_g)
hist(degree_g[degree_g > 0], breaks = 100, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
quant = quantile(degree_g[degree_g>0],0.95)
print(quant)
hubs <- degree_g[degree_g>=quant]
hubs
bet_g = igraph::betweenness(
g,
v = igraph::V(g),
directed = FALSE,
weights = NULL,
#nobigint = TRUE,
normalized = FALSE,
cutoff = -1
)
max(bet)
max(bet_g)
index_bet = as.numeric(names(sort(bet_g[], decreasing = TRUE))
index_bet = as.numeric(names(sort(bet_g[], decreasing = TRUE)))
bet_sort = sort(bet_g, decreasing = TRUE)
index_bet = as.numeric(names(bet_g[]))
quant_bet = quantile(bet_g[bet_g>0],0.95)
print(quant_bet)
hubs_bet <- bet_g[bet_g>=quant_bet]
hubs
hubs_bet
quant_ssi = quantile(specsi[specsi>0],0.95)
specsi = (v <- ssi(g, "Genre"))
library(netseg)
specsi = (v <- ssi(g, "Genre"))
quant_ssi = quantile(specsi[specsi>0],0.95)
print(quant_ssi)
hubs_ssi <- specsi[specsi>=quant_ssi]
hubs_ssi
V(g)[88]
index_ssi_hub = as.numeric(names(hubs_ssi[]))
V(g)[index_ssi_hub]
V(g)$name
V(g)$name == 'Tre Allegri Ragazzi Morti'
which(V(g)$name == 'Tre Allegri Ragazzi Morti')
E(g) [ from(192) ]
E(g) [ .from(192) ]
specsi_sort = sort(specsi, decreasing = FALSE)
specsi_sort
index_ssi_hub = as.numeric(names(index_specsi[1:28]))
index_specsi = as.numeric(names(specsi_sort[]))
index_specsi = as.numeric(names(specsi_sort[1:28]))
V(g)[index_specsi]
hubs_bet
fifty_bet = sort(bet_g, decreasing = TRUE)[1:50]
index_specsi = as.numeric(names(specsi_sort[1:50]))
V(g)[index_specsi]
cane1 = V(g)[index_specsi]
print(cane1)
print(cane1$name)
fifty_bet = sort(bet_g, decreasing = TRUE)[1:50]
fifty_bet
cane1 = V(g)[index_specsi]$name
print(cane1)
cane2 = names(fifty_bet)
cane2
intersect(cane1,cane2)
index_specsi = as.numeric(names(specsi_sort[1:100]))
fifty_bet = sort(bet_g, decreasing = TRUE)[1:100]
intersect(cane1,cane2)
index_specsi = as.numeric(names(specsi_sort[1:500]))
fifty_bet = sort(bet_g, decreasing = TRUE)[1:500]
intersect(cane1,cane2)
cane1
cane2
cane2 = names(fifty_bet)
intersect(cane1,cane2)
index_specsi = as.numeric(names(specsi_sort[1:100]))
cane1 = V(g)[index_specsi]$name
fifty_bet = sort(bet_g, decreasing = TRUE)[1:100]
cane2 = names(fifty_bet)
cane1
cane2
intersect(cane1,cane2)
index_specsi = as.numeric(names(specsi_sort[1:50]))
cane1 = V(g)[index_specsi]$name
fifty_bet = sort(bet_g, decreasing = TRUE)[1:50]
cane2 = names(fifty_bet)
cane1
cane2
intersect(cane1,cane2)
index_specsi = as.numeric(names(specsi_sort[1:75]))
cane1 = V(g)[index_specsi]$name
print(cane1)
fifty_bet = sort(bet_g, decreasing = TRUE)[1:75]
cane2 = names(fifty_bet)
cane1
cane2
intersect(cane1,cane2)
intersect(names(hubs),names(hubs_bet))
