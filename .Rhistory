#library(networkD3)
#library(network)
##### IDEA 07/02 ---> Compara assortativity generale con quella del network
####################  risultante dopo aver selezionato solo artisti con popularity > 50
####################  per vedere se assortativity bassa è causa del network troppo grande
####################  e con molti artisti poco popolari
##### 13/02 ---> PENSA A QUESTO: dato che l'assortativity per popolarità è maggiore
################# di quella per degree, significa che i nodi popolari non sono per forza hubs?
#####
# Loading and preprocessing
setwd('C:/Users/CreCre/Downloads/Assortativity-in-the-italian-music-market')
nodes = read.csv("nodes_2.csv")
edges = read.csv("edges_2_clean.csv")
artist_df_2 = read.csv("artist_df_2.csv")
artist_hiphop = read.csv("artist_hiphop.csv")
artist_df = rbind(artist_df_2, artist_hiphop)
missclass = c(955, 959, 964, 977, 992, 1011, 2795, 2796, 2798, 2802, 2822, 2826,
2841, 2865, 2883, 2954, 2999, 3118, 3272, 3297, 3409)
artist_df[missclass, 6] = 'rap'
#art2 = artist_df[!duplicated(artist_df$X1), ]
italians = (which(artist_df$X4 == 1))
dati_artisti = artist_df[italians,]
#which(dati_artisti$X2 == 'Gary Numan')
#which(dati_artisti$X2 == 'Simple Minds')
#dati_artisti = dati_artisti[-c(857, 1123, 1213)]
dati_artisti[,8] = 'Genre_agg'
for (row in 1:nrow(dati_artisti)){
if (dati_artisti[row,]$X6 == 'rap'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'hip-hop'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'indie'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'indie-pop'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'pop'){
dati_artisti[row,8] = 'Pop'
}
if (dati_artisti[row,]$X6 == 'emo'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk-rock'){
dati_artisti[row,8] = 'Emo/Punk'
}
}
#duplicati = dati_artisti[which(duplicated(dati_artisti$X1)),]
dati_artisti_final = dati_artisti[!duplicated(dati_artisti$X1), -c(4,6)]
colnames(dati_artisti_final) = c('id', 'name', 'followers', 'popularity', 'genre')
#edges_unique = edges[!duplicated(edges), ]
#which(edges$X1 == 'Gary Numan')
#which(edges$X1 == 'Simple Minds')
#edges = edges[-c(2515, 2516),]
edges_unique2 <- edges[!duplicated(apply(edges[,1:2], 1, function(row) paste(sort(row), collapse=""))),]
artisti_genre = as.vector(dati_artisti_final[,6])
artisti_popol = as.vector(dati_artisti_final[,4])
artisti_foll = as.vector(dati_artisti_final[,3])
#####
# Building network
g <- graph_from_data_frame(edges_unique2, directed=FALSE, vertices=nodes
)
g = set_vertex_attr(g, 'Genre', index = V(g), artisti_genre)
g = set_vertex_attr(g, 'Popularity', index = V(g), artisti_popol)
g = set_vertex_attr(g, 'Followers', index = V(g), artisti_foll)
V(g)[vertex_attr(g,'Genre') == 'Rap/Hip-Hop']$color = 'deeppink4'
V(g)[vertex_attr(g,'Genre') == 'Indie']$color = 'turquoise4'
V(g)[vertex_attr(g,'Genre') == 'Pop']$color = 'azure4'
V(g)[vertex_attr(g,'Genre') == 'Emo/Punk']$color = 'olivedrab'
V(g)$degree <- degree(g)
zero_degree = which(degree(g)==0)
g = g - zero_degree
V(g)$name
which(V(g)$name == 'Simple Minds') # 457
which(V(g)$name == 'Gary Numan') # 525
which(V(g)$name == 'Killa Fonic') #98
which(V(g)$name == 'NANE') #97
neighbors(g, 97)
g  = delete_vertices(g, c(457, 525, 98, 97))
V(g)$degree[1]
which(V(g)$name == 'Simple Minds') # 457
which(V(g)$name == 'Gary Numan') # 525
which(V(g)$name == 'Killa Fonic') #98
which(V(g)$name == 'NANE') #97
neighbors(g, 97)
library(igraph)
library(netseg)
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ITNr)
library(backbone)
library(WGCNA)
#library(dplyr)
#library(networkD3)
#library(network)
##### IDEA 07/02 ---> Compara assortativity generale con quella del network
####################  risultante dopo aver selezionato solo artisti con popularity > 50
####################  per vedere se assortativity bassa è causa del network troppo grande
####################  e con molti artisti poco popolari
##### 13/02 ---> PENSA A QUESTO: dato che l'assortativity per popolarità è maggiore
################# di quella per degree, significa che i nodi popolari non sono per forza hubs?
#####
# Loading and preprocessing
setwd('C:/Users/CreCre/Downloads/Assortativity-in-the-italian-music-market')
nodes = read.csv("nodes_2.csv")
edges = read.csv("edges_2_clean.csv")
artist_df_2 = read.csv("artist_df_2.csv")
artist_hiphop = read.csv("artist_hiphop.csv")
artist_df = rbind(artist_df_2, artist_hiphop)
missclass = c(955, 959, 964, 977, 992, 1011, 2795, 2796, 2798, 2802, 2822, 2826,
2841, 2865, 2883, 2954, 2999, 3118, 3272, 3297, 3409)
artist_df[missclass, 6] = 'rap'
#art2 = artist_df[!duplicated(artist_df$X1), ]
italians = (which(artist_df$X4 == 1))
dati_artisti = artist_df[italians,]
#which(dati_artisti$X2 == 'Gary Numan')
#which(dati_artisti$X2 == 'Simple Minds')
#dati_artisti = dati_artisti[-c(857, 1123, 1213)]
dati_artisti[,8] = 'Genre_agg'
for (row in 1:nrow(dati_artisti)){
if (dati_artisti[row,]$X6 == 'rap'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'hip-hop'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'indie'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'indie-pop'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'pop'){
dati_artisti[row,8] = 'Pop'
}
if (dati_artisti[row,]$X6 == 'emo'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk-rock'){
dati_artisti[row,8] = 'Emo/Punk'
}
}
#duplicati = dati_artisti[which(duplicated(dati_artisti$X1)),]
dati_artisti_final = dati_artisti[!duplicated(dati_artisti$X1), -c(4,6)]
colnames(dati_artisti_final) = c('id', 'name', 'followers', 'popularity', 'genre')
#edges_unique = edges[!duplicated(edges), ]
#which(edges$X1 == 'Gary Numan')
#which(edges$X1 == 'Simple Minds')
#edges = edges[-c(2515, 2516),]
edges_unique2 <- edges[!duplicated(apply(edges[,1:2], 1, function(row) paste(sort(row), collapse=""))),]
artisti_genre = as.vector(dati_artisti_final[,6])
artisti_popol = as.vector(dati_artisti_final[,4])
artisti_foll = as.vector(dati_artisti_final[,3])
#####
# Building network
g <- graph_from_data_frame(edges_unique2, directed=FALSE, vertices=nodes
)
g = set_vertex_attr(g, 'Genre', index = V(g), artisti_genre)
g = set_vertex_attr(g, 'Popularity', index = V(g), artisti_popol)
g = set_vertex_attr(g, 'Followers', index = V(g), artisti_foll)
V(g)[vertex_attr(g,'Genre') == 'Rap/Hip-Hop']$color = 'deeppink4'
V(g)[vertex_attr(g,'Genre') == 'Indie']$color = 'turquoise4'
V(g)[vertex_attr(g,'Genre') == 'Pop']$color = 'azure4'
V(g)[vertex_attr(g,'Genre') == 'Emo/Punk']$color = 'olivedrab'
#V(g)$degree <- degree(g)
#zero_degree = which(degree(g)==0)
#g = g - zero_degree
which(V(g)$name == 'Simple Minds') # 457
which(V(g)$name == 'Gary Numan') # 525
which(V(g)$name == 'Killa Fonic') #98
which(V(g)$name == 'NANE') #97
neighbors(g, 97)
g  = delete_vertices(g, c(457, 525, 98, 97))
gsize(g)
V(g)$degree <- degree(g)
zero_degree = which(degree(g)==0)
g = g - zero_degree
V(g)$degree[1]
gsize(g)
m = mixingm(g, "Genre", full = FALSE)
m
which(V(g)$name == 'Gary Numan')
V(g)$degree[521]
gsize(g)
g2 = delete_vertices(g, c(457, 525, 98, 97))
g2 = delete_vertices(g, c(457, 525, 98, 97))
gsize(g)
setwd('C:/Users/CreCre/Downloads/Assortativity-in-the-italian-music-market')
nodes = read.csv("nodes_2.csv")
edges = read.csv("edges_2_clean.csv")
artist_df_2 = read.csv("artist_df_2.csv")
artist_hiphop = read.csv("artist_hiphop.csv")
artist_df = rbind(artist_df_2, artist_hiphop)
missclass = c(955, 959, 964, 977, 992, 1011, 2795, 2796, 2798, 2802, 2822, 2826,
2841, 2865, 2883, 2954, 2999, 3118, 3272, 3297, 3409)
artist_df[missclass, 6] = 'rap'
#art2 = artist_df[!duplicated(artist_df$X1), ]
italians = (which(artist_df$X4 == 1))
dati_artisti = artist_df[italians,]
#which(dati_artisti$X2 == 'Gary Numan')
#which(dati_artisti$X2 == 'Simple Minds')
#dati_artisti = dati_artisti[-c(857, 1123, 1213)]
dati_artisti[,8] = 'Genre_agg'
for (row in 1:nrow(dati_artisti)){
if (dati_artisti[row,]$X6 == 'rap'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'hip-hop'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'indie'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'indie-pop'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'pop'){
dati_artisti[row,8] = 'Pop'
}
if (dati_artisti[row,]$X6 == 'emo'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk-rock'){
dati_artisti[row,8] = 'Emo/Punk'
}
}
#duplicati = dati_artisti[which(duplicated(dati_artisti$X1)),]
dati_artisti_final = dati_artisti[!duplicated(dati_artisti$X1), -c(4,6)]
colnames(dati_artisti_final) = c('id', 'name', 'followers', 'popularity', 'genre')
#edges_unique = edges[!duplicated(edges), ]
#which(edges$X1 == 'Gary Numan')
#which(edges$X1 == 'Simple Minds')
#edges = edges[-c(2515, 2516),]
edges_unique2 <- edges[!duplicated(apply(edges[,1:2], 1, function(row) paste(sort(row), collapse=""))),]
artisti_genre = as.vector(dati_artisti_final[,6])
artisti_popol = as.vector(dati_artisti_final[,4])
artisti_foll = as.vector(dati_artisti_final[,3])
#####
# Building network
g <- graph_from_data_frame(edges_unique2, directed=FALSE, vertices=nodes
)
g = set_vertex_attr(g, 'Genre', index = V(g), artisti_genre)
g = set_vertex_attr(g, 'Popularity', index = V(g), artisti_popol)
g = set_vertex_attr(g, 'Followers', index = V(g), artisti_foll)
V(g)[vertex_attr(g,'Genre') == 'Rap/Hip-Hop']$color = 'deeppink4'
V(g)[vertex_attr(g,'Genre') == 'Indie']$color = 'turquoise4'
V(g)[vertex_attr(g,'Genre') == 'Pop']$color = 'azure4'
V(g)[vertex_attr(g,'Genre') == 'Emo/Punk']$color = 'olivedrab'
which(V(g)$name == 'Simple Minds') # 457
which(V(g)$name == 'Gary Numan') # 525
which(V(g)$name == 'Killa Fonic') #98
which(V(g)$name == 'NANE') #97
neighbors(g, 97)
g2 = delete_vertices(g, c(113, 114, 563, 766))
gsize(g)
g = delete_vertices(g, c(113, 114, 563, 766))
gsize(g)
V(g)$degree <- degree(g)
zero_degree = which(degree(g)==0)
g = g - zero_degree
V(g)$degree[1]
m = mixingm(g, "Genre", full = FALSE)
m
V(g_inter_pop)
long_cat = igraph::as_long_data_frame(g)
long_cat_inter = long_cat[long_cat[,4] != long_cat[,10],]
long_cat_edges = long_cat_inter[,c(3,9)]
long_cat_inter_pop = long_cat_inter %>%
filter(from_Genre=='Pop', to_Genre=='Emo/Punk')
long_cat_inter_pop_edges = long_cat_inter_pop[,c(3,9)]
g_inter_pop = igraph::graph_from_data_frame(long_cat_inter_pop_edges, directed=FALSE)
V(g_inter_pop)
plot(g_inter_pop, vertex.label = V(g_inter_pop)$name, )
gsize(g_inter_pop)
m
1797/gsize(g)*100
1797+363+327+58
(1797+363+327+58)/gsize(g)*100
specsi = (v <- ssi(g, "Genre"))
mean(specsi)
hist(specsi, breaks = 100, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
max(specsi)
g_rap = igraph::delete_vertices(g, igraph::V(g)[!igraph::vertex_attr(g, "Genre") == 'Rap/Hip-Hop'])
zero_degree_rap = which(igraph::degree(g_rap)==0)
g_rap = g_rap - zero_degree_rap
gsize(g_rap)
specsi_grap = (v <- ssi(g_rap, "Genre"))
mean(specsi_grap)
max(specsi_grap)
specsi_grap
specsi = (v <- ssi(g, "Genre"))
mean(specsi)
max(specsi)
uela = sort(specsi, decreasing = FALSE)
uela[1]
uela[2]
specsi
uela
uela = sort(specsi, decreasing = TRUE)
uela
uela[1]
V(g)[242]
v_10 = V(g)[which(V(g)$degree >= 10)]
count_components(g)
specsi_rap = V(g)[which(V(g)$Genre == 'Rap/Hip-Hop')]$ssi
popularity_rap = V(g)[which(V(g)$Genre == 'Rap/Hip-Hop')]$Popularity
mean(specsi_rap)
mean(popularity_rap)
V(g)[242]
g = set_vertex_attr(g, 'ssi', index = V(g), specsi)
V(g)$ssi[242]
max(specsi)
specsi_rap = V(g)[which(V(g)$Genre == 'Rap/Hip-Hop')]$ssi
popularity_rap = V(g)[which(V(g)$Genre == 'Rap/Hip-Hop')]$Popularity
mean(specsi_rap)
mean(popularity_rap)
specsi_pop = V(g)[which(V(g)$Genre == 'Pop')]$ssi
popularity_pop = V(g)[which(V(g)$Genre == 'Pop')]$Popularity
mean(specsi_pop)
mean(popularity_pop)
specsi_indie = V(g)[which(V(g)$Genre == 'Indie')]$ssi
popularity_indie = V(g)[which(V(g)$Genre == 'Indie')]$Popularity
mean(specsi_indie)
mean(popularity_indie)
specsi_emo = V(g)[which(V(g)$Genre == 'Emo/Punk')]$ssi
popularity_emo = V(g)[which(V(g)$Genre == 'Emo/Punk')]$Popularity
mean(specsi_emo)
mean(popularity_emo)
rap_nodes = V(g)[which(V(g)$Genre == 'Rap/Hip-Hop')]
pop_nodes = V(g)[which(V(g)$Genre == 'Pop')]
indie_nodes = V(g)[which(V(g)$Genre == 'Indie')]
emo_nodes = V(g)[which(V(g)$Genre == 'Emo/Punk')]
for (i in genres){
#print(i)
for (j in genres){
if (i != j){
nodes1 = V(g)[which(V(g)$Genre == i)]
nodes2 = V(g)[which(V(g)$Genre == j)]
net = induced_subgraph(g, vids = c(nodes1, nodes2))
spsi = (v <- ssi(net, "Genre"))
spsi = mean(spsi)
specsi_genres[length(specsi_genres)+1]=spsi
}
}
}
genres = c('Rap/Hip-Hop', 'Pop', 'Indie', 'Emo/Punk')
specsi_genres = c()
for (i in genres){
#print(i)
for (j in genres){
if (i != j){
nodes1 = V(g)[which(V(g)$Genre == i)]
nodes2 = V(g)[which(V(g)$Genre == j)]
net = induced_subgraph(g, vids = c(nodes1, nodes2))
spsi = (v <- ssi(net, "Genre"))
spsi = mean(spsi)
specsi_genres[length(specsi_genres)+1]=spsi
}
}
}
specsi_genres
assort(g, 'Genre')
ei(g, "Genre")
freeman(g, 'Genre')
long_ssi = igraph::as_long_data_frame(g)
long_ssi[8,9]
long_ssi = long_ssi[,c(8,9)]
long_ssi = long_ssif[order(long_ssi[,1]),]
long_ssi = long_ssi[order(long_ssi[,1]),]
View(long_ssi)
plot(long_ssi[,1], long_ssi[,2])
plot(log(long_ssi[,1]), log(long_ssi[,2]))
mean(specsi_rap)
mean(popularity_rap)
specsi_pop = V(g)[which(V(g)$Genre == 'Pop')]$ssi
popularity_pop = V(g)[which(V(g)$Genre == 'Pop')]$Popularity
mean(specsi_pop)
mean(popularity_pop)
specsi_indie = V(g)[which(V(g)$Genre == 'Indie')]$ssi
popularity_indie = V(g)[which(V(g)$Genre == 'Indie')]$Popularity
mean(specsi_indie)
mean(popularity_indie)
specsi_emo = V(g)[which(V(g)$Genre == 'Emo/Punk')]$ssi
popularity_emo = V(g)[which(V(g)$Genre == 'Emo/Punk')]$Popularity
mean(specsi_emo)
mean(popularity_emo)
## Doesn't seem to work properly
ei_genres = c()
for (i in genres){
#print(i)
for (j in genres){
if (i != j){
nodes1 = V(g)[which(V(g)$Genre == i)]
nodes2 = V(g)[which(V(g)$Genre == j)]
net = induced_subgraph(g, vids = c(nodes1, nodes2))
ei_gen = ei(net, "Genre")
#ei_gen = mean(ei_gen)
ei_genres[length(ei_genres)+1]=ei_gen
}
}
}
ei_genres
freeman_genres = c()
for (i in genres){
#print(i)
for (j in genres){
if (i != j){
nodes1 = V(g)[which(V(g)$Genre == i)]
nodes2 = V(g)[which(V(g)$Genre == j)]
net = induced_subgraph(g, vids = c(nodes1, nodes2))
freeman_gen = freeman(net, "Genre")
#ei_gen = mean(ei_gen)
freeman_genres[length(freeman_genres)+1]=freeman_gen
}
}
}
freeman_genres
ei_genres
specsi_genres
# Assortativity:
igraph::assortativity_degree(g, directed = FALSE)
igraph::assortativity(g, igraph::V(g)$Popularity, types2 = NULL, directed = FALSE)
igraph::assortativity(g, igraph::V(g)$Popularity, types2 = NULL, directed = FALSE)
#get.vertex.attribute(g,'Popularity')
igraph::assortativity(g, igraph::V(g)$Followers, types2 = NULL, directed = FALSE)
knn_g = knn(
g,
vids = V(g),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
knn_g$knn
knn_g$knnk
degree_unsorted = as.data.frame(degree(g, v = V(g)))
degree_unsorted_un = sort(unique(degree_unsorted[,1]))
knnk = knn_g$knnk
knnk = knnk[!is.na(knnk)]
avg_degree_squared = degree_unsorted^2
avg_degree_squared = mean(avg_degree_squared[,1])
neutral = avg_degree_squared / mean(degree_unsorted[,1])
knnk = append(knnk, neutral)
#knnk = (knnk-min(knnk))/(max(knnk)-min(knnk))
#neutral_norm = knnk[57] #〈k2〉 / 〈k〉
knnk = knnk[1:56]
plot1 = as.data.frame(cbind(unique(degree_unsorted_un), knnk))
colnames(plot1) = c('k', 'knnk')
plot(log(plot1$k), log(plot1$knnk))
abline(h = log(neutral))
ggplot(plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
#geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=neutral)
log_plot1 = data.frame(k=log(plot1$k),
knnk=log(plot1$knnk))
p1 = ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
#geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
p1
p1 = ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
#geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Degree correlation") +
geom_hline(yintercept=log(neutral))
p1
log(90)
igraph::assortativity_nominal(g, igraph::V(g)$Genre, types2 = NULL, directed = FALSE)
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rm = rewire(g, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm, directed = FALSE)
g_rm = rewire(g, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm, directed = FALSE)
g_rm = rewire(g, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm, directed = FALSE)
is_simple(g_rm)
