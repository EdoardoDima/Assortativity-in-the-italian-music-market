mean(degree_pop)
hist(degree_pop[degree_pop > 0], breaks = 100, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
assortativity_degree(g_pop, directed = FALSE)
knn_pop = knn(
g_pop,
vids = V(g_pop),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
degree_unsorted_pop = as.data.frame(degree(g_pop, v = V(g_pop)))
degree_unsorted_un_pop = sort(unique(degree_unsorted_pop[,1]))
knnk_pop = knn_pop$knnk
knnk_pop = knnk_pop[!is.na(knnk_pop)]
avg_degree_squared_pop = degree_unsorted_pop^2
avg_degree_squared_pop = mean(avg_degree_squared_pop[,1])
neutral_pop = avg_degree_squared_pop / mean(degree_unsorted_pop[,1])
knnk_pop = append(knnk_pop, neutral_pop)
knnk_pop = (knnk_pop-min(knnk_pop))/(max(knnk_pop)-min(knnk_pop))
neutral_norm_pop = knnk_pop[length(knnk_pop)] #〈k2〉 / 〈k〉
knnk_pop = knnk[1:length(knnk_pop)-1]
plot1_pop = as.data.frame(cbind(unique(degree_unsorted_un_pop), knnk_pop))
colnames(plot1_pop) = c('k', 'knnk')
plot(plot1_pop$k, plot1_pop$knnk)
abline(h = neutral_norm_pop)
assortativity(g_pop, get.vertex.attribute(g_pop,'Popularity'), types2 = NULL, directed = FALSE)
knn_indie = knn(
g_indie,
vids = V(g_indie),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
g_indie = delete_vertices(g, V(g)[!vertex_attr(g, "Genre") == 'Indie'])
zero_degree_indie = which(degree(g_indie)==0)
g_indie = g_indie - zero_degree_indie
plot(g_indie,vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout.fruchterman.reingold,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
degree_indie = sort(igraph::degree(g_indie, v = V(g_indie)), decreasing = TRUE)
length(which(degree_indie== 0))
mean(degree_indie)
hist(degree_indie[degree_indie > 0], breaks = 10, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
assortativity_degree(g_indie, directed = FALSE)
quant_indie = quantile(degree_indie[degree_indie>0],0.95)
hubs_indie <- degree_indie[degree_indie>=quant_indie]
hubs_indie
knn_indie = knn(
g_indie,
vids = V(g_indie),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
degree_unsorted_indie = as.data.frame(degree(g_indie, v = V(g_indie)))
degree_unsorted_un_indie = sort(unique(degree_unsorted_indie[,1]))
knnk_indie = knn_indie$knnk
knnk_indie = knnk_indie[!is.na(knnk_indie)]
avg_degree_squared_indie = degree_unsorted_indie^2
avg_degree_squared_indie = mean(avg_degree_squared_indie[,1])
neutral_indie = avg_degree_squared_indie / mean(degree_unsorted_indie[,1])
knnk_indie = append(knnk_indie, neutral_indie)
knnk_indie = (knnk_indie-min(knnk_indie))/(max(knnk_indie)-min(knnk_indie))
neutral_norm_indie = knnk_indie[length(knnk_indie)] #〈k2〉 / 〈k〉
knnk_indie = knnk[1:length(knnk_indie)-1]
plot1_indie = as.data.frame(cbind(unique(degree_unsorted_un_indie), knnk_indie))
colnames(plot1_indie) = c('k', 'knnk')
plot(plot1_indie$k, plot1_indie$knnk)
abline(h = neutral_norm_indie)
assortativity(g_indie, get.vertex.attribute(g_indie,'Popularity'), types2 = NULL, directed = FALSE)
assortativity_degree(g_indie, directed = FALSE)
g_emo = delete_vertices(g, V(g)[!vertex_attr(g, "Genre") == 'Emo/Punk'])
zero_degree_emo = which(degree(g_emo)==0)
g_emo = g_emo - zero_degree_emo
plot(g_emo,vertex.size=5, edge.curverd=.1, arrow.size=.1,
main = "Ueeeueeee",
layout = layout.fruchterman.reingold,
arrow.width=.1, edge.arrow.size=.1, vertex.label = NA)
degree_emo = sort(igraph::degree(g_emo, v = V(g_emo)), decreasing = TRUE)
length(which(degree_emo== 0))
mean(degree_emo)
hist(degree_emo[degree_emo > 0], breaks = 10, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
assortativity_degree(g_emo, directed = FALSE)
quant_emo = quantile(degree_emo[degree_emo>0],0.95)
hubs_emo <- degree_emo[degree_emo>=quant_emo]
hubs_emo
knn_emo = knn(
g_emo,
vids = V(g_emo),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
degree_unsorted_emo = as.data.frame(degree(g_emo, v = V(g_emo)))
degree_unsorted_un_emo = sort(unique(degree_unsorted_emo[,1]))
knnk_emo = knn_emo$knnk
knnk_emo = knnk_emo[!is.na(knnk_emo)]
avg_degree_squared_emo = degree_unsorted_emo^2
avg_degree_squared_emo = mean(avg_degree_squared_emo[,1])
neutral_emo = avg_degree_squared_emo / mean(degree_unsorted_emo[,1])
knnk_emo = append(knnk_emo, neutral_emo)
knnk_emo = (knnk_emo-min(knnk_emo))/(max(knnk_emo)-min(knnk_emo))
neutral_norm_emo = knnk_emo[length(knnk_emo)] #〈k2〉 / 〈k〉
knnk_emo = knnk[1:length(knnk_emo)-1]
plot1_emo = as.data.frame(cbind(unique(degree_unsorted_un_emo), knnk_emo))
colnames(plot1_emo) = c('k', 'knnk')
plot(plot1_emo$k, plot1_emo$knnk)
abline(h = neutral_norm_emo)
most_popular_indie = get.vertex.attribute(g_indie,'Popularity')
most_popular_indie = V(g_indie)$Popularity
most_popular_indie = sort(V(g_indie)$Popularity)
most_popular_indie = sort(V(g_indie)$Popularity, descending = T)
?sort()
most_popular_indie = sort(V(g_indie)$Popularity, decreasing = T)
most_popular_indie
which(V(g_indie)$Popularity == 74)
View(g_indie)
igraph::assortativity(g_rap, igraph::V(g_rap)$Popularity, directed = FALSE)
igraph::assortativity(g_rap, igraph::V(g_rap)$Followers, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = FALSE, niter = 1000))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = T, niter = 1000))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = T, niter = 1000))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = T, niter = 1000))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 1000))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 100))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 100))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 695))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 695))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 695))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
g_shuffle = rewire(g, with = keeping_degseq(loops = F, niter = 1000))
igraph::assortativity_degree(g_shuffle, directed = FALSE)
# Assortativity:
igraph::assortativity_degree(g, directed = FALSE)
g_shuffle_rap = rewire(g_rap, with = keeping_degseq(loops = F, niter = 1000))
igraph::assortativity_degree(g_shuffle_rap, directed = FALSE)
igraph::assortativity_degree(g_rap, directed = FALSE)
View(out)
View(data)
plot(log(plot1$k), log(plot1$knnk))
knn_g = knn(
g,
vids = V(g),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
degree_unsorted = as.data.frame(degree(g, v = V(g)))
degree_unsorted_un = sort(unique(degree_unsorted[,1]))
knnk = knn_g$knnk
knnk = knnk[!is.na(knnk)]
avg_degree_squared = degree_unsorted^2
avg_degree_squared = mean(avg_degree_squared[,1])
neutral = avg_degree_squared / mean(degree_unsorted[,1])
knnk = append(knnk, neutral)
#knnk = (knnk-min(knnk))/(max(knnk)-min(knnk))
#neutral_norm = knnk[57] #〈k2〉 / 〈k〉
knnk = knnk[1:56]
plot1 = as.data.frame(cbind(unique(degree_unsorted_un), knnk))
colnames(plot1) = c('k', 'knnk')
plot(log(plot1$k), log(plot1$knnk))
abline(h = neutral_norm)
abline(h = log(neutral_norm))
log(neutral_norm)
log(neutral)
abline(h = log(neutral))
ggplot(plot1, aes(x = log(k), y = log(knnk))) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
g_rs = rewire(g, with = keeping_degseq(loops = F, niter = 1000))
knn_rs = knn(
g_rs,
vids = V(g_rs),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
degree_unsorted_rs = as.data.frame(degree(g_rs, v = V(g_rs)))
degree_unsorted_un_rs = sort(unique(degree_unsorted_rs[,1]))
knnk_rs = knn_rs$knnk
knnk_rs = knnk_rs[!is.na(knnk_rs)]
ggplot(plot1, aes(x = log(k), y = log(knnk))) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
geom_point(data = knnk_rs, color = 'orchid') +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
ggplot(plot1, aes(x = log(k), y = log(knnk))) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
geom_point(data = as.data.frame(knnk_rs), color = 'orchid') +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
ggplot(plot1, aes(x = log(k), y = log(knnk))) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
geom_point(data = as.data.frame(knnk_rs), color = 'orchid') +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
log_plot1 = data.frame(k=log(plot1$k),
knnk=log(plot1$knnk))
ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
p1 = ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
plot(p1)
plot(p1)
log_plot2 = data.frame(k=log(plot1$k),
knnk=log(knnk_rs))
p2 = p1 +
geom_point(data = log_plot2, shape = 'diamond', size = 2,
mapping = aes(x=k, y= knnk, color = 'orchid'))
p2
p2 = p1 +
geom_point(data = log_plot2, shape = 'diamond', size = 2,
mapping = aes(x=k, y= knnk, color = 'green'))
p2
p2 = p1 +
geom_point(data = log_plot2, shape = 'diamond', size = 2, color = 'green',
mapping = aes(x=k, y= knnk))
p2
p2 = p1 +
geom_point(data = log_plot2, shape = 'diamond', size = 2, color = 'orange',
mapping = aes(x=k, y= knnk))
p2
igraph::assortativity_degree(g_rs, directed = FALSE)
g_rm = rewire(g, with = keeping_degseq(loops = T, niter = 1000))
igraph::assortativity_degree(g_rm, directed = FALSE)
knn_rm = knn(
g_rm,
vids = V(g_rm),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
knnk_rm = knn_rm$knnk
knnk_rm = knnk_rm[!is.na(knnk_rm)]
log_plot3 = data.frame(k=log(plot1$k),
knnk=log(knnk_rm))
knn_rm = knn(
g_rm,
vids = V(g_rm),
mode = 'all',
neighbor.degree.mode = 'all',
weights = NULL
)
p1 = ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
p1
p2 = p1 +
geom_point(data = log_plot2, shape = 'diamond', size = 2, color = 'orange',
mapping = aes(x=k, y= knnk)) +
geom_smooth(method = "lm", se = FALSE)
p2
p1 = ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
#geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
p1
p2 = p1 +
geom_point(data = log_plot2, shape = 'diamond', size = 2, color = 'orange',
mapping = aes(x=k, y= knnk)) +
geom_smooth(method = "lm", se = FALSE)
p2
View(nodes)
plot_degree_distribution(g, a = 'all')
library(igraph)
library(netseg)
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(ITNr)
library(backbone)
#library(dplyr)
#library(networkD3)
#library(network)
#####
# Loading and preprocessing
setwd('C:/Users/CreCre/Downloads/Assortativity-in-the-italian-music-market')
nodes = read.csv("nodes_2.csv")
edges = read.csv("edges_2_clean.csv")
artist_df_2 = read.csv("artist_df_2.csv")
artist_hiphop = read.csv("artist_hiphop.csv")
artist_df = rbind(artist_df_2, artist_hiphop)
missclass = c(955, 959, 964, 977, 992, 1011, 2795, 2796, 2798, 2802, 2822, 2826,
2841, 2865, 2883, 2954, 2999, 3118, 3272, 3297, 3409)
artist_df[missclass, 6] = 'rap'
#art2 = artist_df[!duplicated(artist_df$X1), ]
italians = (which(artist_df$X4 == 1))
dati_artisti = artist_df[italians,]
dati_artisti[,8] = 'Genre_agg'
for (row in 1:nrow(dati_artisti)){
if (dati_artisti[row,]$X6 == 'rap'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'hip-hop'){
dati_artisti[row,8] = 'Rap/Hip-Hop'
}
if (dati_artisti[row,]$X6 == 'indie'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'indie-pop'){
dati_artisti[row,8] = 'Indie'
}
if (dati_artisti[row,]$X6 == 'pop'){
dati_artisti[row,8] = 'Pop'
}
if (dati_artisti[row,]$X6 == 'emo'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk'){
dati_artisti[row,8] = 'Emo/Punk'
}
if (dati_artisti[row,]$X6 == 'punk-rock'){
dati_artisti[row,8] = 'Emo/Punk'
}
}
#duplicati = dati_artisti[which(duplicated(dati_artisti$X1)),]
dati_artisti_final = dati_artisti[!duplicated(dati_artisti$X1), -c(4,6)]
colnames(dati_artisti_final) = c('id', 'name', 'followers', 'popularity', 'genre')
#edges_unique = edges[!duplicated(edges), ]
edges_unique2 <- edges[!duplicated(apply(edges[,1:2], 1, function(row) paste(sort(row), collapse=""))),]
artisti_genre = as.vector(dati_artisti_final[,6])
artisti_popol = as.vector(dati_artisti_final[,4])
artisti_foll = as.vector(dati_artisti_final[,3])
#####
# Building network
g <- graph_from_data_frame(edges_unique2, directed=FALSE, vertices=nodes
)
g = set_vertex_attr(g, 'Genre', index = V(g), artisti_genre)
g = set_vertex_attr(g, 'Popularity', index = V(g), artisti_popol)
g = set_vertex_attr(g, 'Followers', index = V(g), artisti_foll)
V(g)[vertex_attr(g,'Genre') == 'Rap/Hip-Hop']$color = 'deeppink4'
V(g)[vertex_attr(g,'Genre') == 'Indie']$color = 'turquoise4'
V(g)[vertex_attr(g,'Genre') == 'Pop']$color = 'azure4'
V(g)[vertex_attr(g,'Genre') == 'Emo/Punk']$color = 'olivedrab'
V(g)$degree <- degree(g)
zero_degree = which(degree(g)==0)
g = g - zero_degree
# Plotting:
plot(g, vertex.size=5, edge.curverd=.1, arrow.size=.1, vertex.color = "orchid",
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold,
vertex.label = NA)#ifelse(degree(g) >= 34, V(g)$name, NA))
degree_g = sort(igraph::degree(g, v = V(g), mode = "all"), decreasing = TRUE)
length(which(degree_g== 0))
mean(degree_g)
hist(degree_g[degree_g > 0], breaks = 100, col = 'orchid',
xlab = 'Degree', main = 'UEUEUE')
plot_degree_distribution(g, a = 'all')
g_backbone = sparsify.with.localdegree(g, s = 0.1)
plot(g_backbone, vertex.size=ifelse(degree(g) >= 5, V(g)$degree/60*10, V(g)$degree+2),
edge.curverd=.1, arrow.size=.1,
main = "UEEE",
arrow.width=.1, edge.arrow.size=.1, layout= layout.fruchterman.reingold,
vertex.label = NA)#ifelse(degree(g) >= 60, V(g)$name, NA))
quant
igraph::transitivity(
g,
type = 'undirected',
vids = NULL,
weights = NULL,
isolates = c("NaN", "zero")
)
intersect(names(hubs),names(hubs_bet))
bet_g = igraph::betweenness(
g,
v = igraph::V(g),
directed = FALSE,
weights = NULL,
#nobigint = TRUE,
normalized = FALSE,
cutoff = -1
)
quant_bet = quantile(bet_g[bet_g>0],0.95)
print(quant_bet)
hubs_bet <- bet_g[bet_g>=quant_bet]
hubs_bet
intersect(names(hubs),names(hubs_bet))
clos_g = igraph::closeness(
g,
vids = igraph::V(g),
mode = 'total',
weights = NULL,
normalized = TRUE,
cutoff = -1
))
clos_g = igraph::closeness(
g,
vids = igraph::V(g),
mode = 'total',
weights = NULL,
normalized = TRUE,
#cutoff = -1
))
clos_g = igraph::closeness(
g,
vids = igraph::V(g),
mode = 'total',
weights = NULL,
normalized = TRUE,
cutoff = -1
)
quant_clos = quantile(clos_g[clos_g>0],0.95)
print(quant_clos)
hubs_clos <- clos_g[clos_g>=quant_clos]
hubs_clos
intersect(names(hubs),names(hubs_clos))
ggplot(plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
#geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=neutral)
p1 = ggplot(log_plot1, aes(x = k, y = knnk)) +
geom_point(color = "firebrick", shape = "diamond", size = 2) +
#geom_smooth(method = "lm", se = FALSE) +
labs(x = "k", y = "knn(k)") +
theme(axis.title.x = element_text(margin = margin(t = 10), size = 15, face = "italic"),
axis.title.y = element_text(margin = margin(r = 10), size = 15, face = "italic")) +
ggtitle("Temperatures in Chicago") +
geom_hline(yintercept=log(neutral))
p1
igraph::assortativity_degree(g_rap, directed = FALSE)
igraph::assortativity(g_rap, igraph::V(g_rap)$Popularity, directed = FALSE)
assortativity_degree(g_pop, directed = FALSE)
assortativity(g_pop, get.vertex.attribute(g_pop,'Popularity'), types2 = NULL, directed = FALSE)
igraph::assortativity(g_pop, igraph::V(g_pop)$Popularity, directed = FALSE)
assortativity_degree(g_indie, directed = FALSE)
igraph::assortativity(g_indie, igraph::V(g_indie)$Popularity, directed = FALSE)
assortativity_degree(g_emo, directed = FALSE)
igraph::assortativity(g_emo, igraph::V(g_emo)$Popularity, directed = FALSE)
g_shuffle_rap = rewire(g_rap, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_shuffle_rap, directed = FALSE)
g_shuffle_pop = rewire(g_pop, with = keeping_degseq(loops = F, niter = 10000))
igpoph::assortativity_degree(g_shuffle_pop, directed = FALSE)
igraph::assortativity_degree(g_shuffle_pop, directed = FALSE)
g_shuffle_indie = rewire(g_indie, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_shuffle_indie, directed = FALSE)
g_shuffle_emo = rewire(g_emo, with = keeping_degseq(loops = F, niter = 10000))
igraph::assortativity_degree(g_shuffle_emo, directed = FALSE)
g_rm_rap = rewire(g_rap, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm_rap, directed = FALSE)
g_rm_pop = rewire(g_pop, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm_pop, directed = FALSE)
g_rm_indie = rewire(g_indie, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm_indie, directed = FALSE)
g_rm_emo = rewire(g_emo, with = keeping_degseq(loops = T, niter = 10000))
igraph::assortativity_degree(g_rm_emo, directed = FALSE)
x = degree_g
occur = as.vector(table(x))
occur = occur/sum(occur)
p = occur/sum(occur)
y = rev(cumsum(rev(p)))
x = as.numeric(names(table(x)))
plot(x, y, log="xy", type="l")
library(WGCNA)
scaleFreePlot(degree_g,main = 'Scale-free fit (cancer network, soft thr.):')
scaleFreePlot(degree_g,main = 'Scale-free fit ')
plot(log(x), log(y), type="l")
plot_degree_distribution(g, a = 'all')
plot(degree_g)
plot(degree_g[degree_g > 0])
plot(degree_g[degree_g > 0])
plot(log(degree_g[degree_g > 0]))
scaleFreePlot(degree_g,main = 'Scale-free fit ')
